#!/bin/sh
set -e

sdk_dir="/opt/android-sdk"

# zip files
tools=$1
platform=$2
platform_tools=$3
build_tools=$4

case "$(basename "$tools")"          in tools*);; *) echo "invalid tools file $tools"; exit 1;; esac
case "$(basename "$platform")"       in platform*);; *) echo "invalid platform file $platform";exit 1;; esac
case "$(basename "$platform_tools")" in platform-tools*);; *) echo "invalid platform-tools file $platform_tools";exit 1;; esac
case "$(basename "$build_tools")"    in build-tools*);; *) echo "invalid build-tools file $build_tools";exit 1;; esac

# extract needed info from zips
apilevel=$(unzip -p "$platform" '*/source.properties' | sed -n 's/.*ApiLevel=//p')
build_tools_ver=$(unzip -p "$build_tools" '*/source.properties' | sed -n 's/.*Revision=//p')

# Some of this seems overly complex, but it's so that this script can update as
# well as install from scratch. It creates a working SDK directory with proper
# permissions and then merges it with $sdk_dir.

scratch=$(mktemp -d)

# unzip
echo unzipping tools...
unzip -qd "$scratch" "$tools"
echo unzipping platform...
unzip -qd "$scratch/platforms" "$platform"
echo unzipping platform-tools...
unzip -qd "$scratch" "$platform_tools"
echo unzipping build-tools...
unzip -qd "$scratch/build-tools" "$build_tools"

# needed renaming
mv "$scratch"/platforms/*  "$scratch/platforms/android-$apilevel"
mv "$scratch"/build-tools/* "$scratch/build-tools/$build_tools_ver"

# set permissions
chmod -R a=u "$scratch"
mkdir -pm777 "$sdk_dir"

# copy with hardlinks if possible to speed things up a lot
cpopts=
[ "$(stat -c %d "$scratch")" = "$(stat -c %d "$sdk_dir")" ] && cpopts=-lf

# merge
echo "installing to ${sdk_dir}..."
cp -a $cpopts "$scratch"/* "$sdk_dir"

# clear temp directory
rm -rf "$scratch"

exit 0
